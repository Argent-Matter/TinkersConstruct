/*
 * Tinkers Construct
 * Master build file
 * 
 * Authors: boni, Sunstrike, ProgWML6
 * Help from AbrarSyed
 */

//file:noinspection GroovyAssignabilityCheck
plugins {
    id "fabric-loom" version "1.1.+"
    id "maven-publish"
//    id "io.freefair.lombok"
    id "io.github.juuxel.loom-quiltflower" version "1.+"
    id "org.quiltmc.quilt-mappings-on-loom" version "4.2.+"
}

group = 'slimeknights.tconstruct'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

// sets version to the slimeKnights version format
task buildInfo {
    try {
        def cmd = "git rev-parse --short HEAD"
        def proc = cmd.execute()
        proc.waitFor()
        if (proc.exitValue() == 0) {
            ext.revision = proc.text.trim()
        } else {
            ext.revision = "GITBORK"
        }
    } catch (all) {
        ext.revision = "gitgud"
    }

    if (System.getenv().GITHUB_RUN_NUMBER != null) {
        ext.buildNum = "${System.getenv().GITHUB_RUN_NUMBER}"
    } else {
        ext.buildNum = "DEV.${project.buildInfo.revision}"
    }
}
ext.artifact_version = 'NFG'
if (System.getenv().ARTIFACT_VERSION == null) {
    artifact_version = "${mod_version}.${project.buildInfo.buildNum}"
}
if (System.getenv().ARTIFACT_VERSION != null) {
    artifact_version = "${system.getenv().ARTIFACT_VERSION}"
}

version = "${minecraft_version}-${artifact_version}"

sourceSets {
    main {
        resources {
            srcDirs "src/generated/resources"
            //But exclude the cache of the generated data from what gets built
            exclude '.cache'
        }
    }
}

loom {
    accessWidenerPath = file("src/main/resources/tinkers.accesswidener")

    runs {
        datagen {
            client()

            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"
            vmArg "-Dfabric-api.datagen.modid=tconstruct"
            // from ae2
            property "porting_lib.datagen.existing_resources", file("src/main/resources").absolutePath

            runDir "build/datagen"
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" } // Forge Config API Port
    maven { url = "https://libraries.minecraft.net/" }
    maven { url = "https://api.modrinth.com/maven" }
    maven { url = "https://maven.terraformersmc.com/releases/" }
    maven { url = "https://maven.shedaniel.me/"  }
    maven { url = "https://maven.wispforest.io" } // TOP
    maven { url = "https://maven.blamejared.com" } // CraftTweaker, Immersive Engineering
    maven { url = "https://www.cursemaven.com" }
    maven { url = "https://maven.jamieswhiteshirt.com/libs-release" }
    maven { url = "https://ladysnake.jfrog.io/artifactory/mods" }
    maven { url = "https://mvn.devos.one/releases/" }
    maven { url = "https://mvn.devos.one/snapshots/" }
    maven { url = "https://maven.parchmentmc.org" }
    maven { url = "https://jitpack.io" }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
}

allprojects {
    apply plugin: "fabric-loom"
    apply plugin: "io.github.juuxel.loom-quiltflower"
    apply plugin: "org.quiltmc.quilt-mappings-on-loom"

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" } // Forge Config API Port
        maven { url = "https://libraries.minecraft.net/" }
        maven { url = "https://api.modrinth.com/maven" }
        maven { url = "https://maven.terraformersmc.com/releases/" }
        maven { url = "https://maven.shedaniel.me/"  }
        maven { url = "https://maven.wispforest.io" } // TOP
        maven { url = "https://maven.blamejared.com" } // CraftTweaker, Immersive Engineering
        maven { url = "https://www.cursemaven.com" }
        maven { url = "https://maven.jamieswhiteshirt.com/libs-release" }
        maven { url = "https://ladysnake.jfrog.io/artifactory/mods" }
        maven { url = "https://mvn.devos.one/releases/" }
        maven { url = "https://mvn.devos.one/snapshots/" }
        maven { url = "https://maven.parchmentmc.org" }
        maven { url = "https://jitpack.io" }
        maven {
            // location of the maven that hosts JEI files
            name = "Progwml6 maven"
            url = "https://dvs1.progwml6.com/files/maven/"
        }
        maven {
            // location of a maven mirror for JEI files, as a fallback
            name = "ModMaven"
            url = "https://modmaven.dev"
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${minecraft_version}"

        mappings loom.officialMojangMappings()

        // lombok
        compileOnly("org.projectlombok:lombok:1.18.22")
        annotationProcessor("org.projectlombok:lombok:1.18.22")

        testCompileOnly("org.projectlombok:lombok:1.18.22")
        testAnnotationProcessor("org.projectlombok:lombok:1.18.22")

        // dev environment
        modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")
        modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")

        modImplementation(include("io.github.fabricators_of_create:Porting-Lib:${project.port_lib_version}+1.19.1"))
        modImplementation(include("io.github.tropheusj:serialization-hooks:0.4.27"))


        implementation 'com.electronwill.night-config:core:3.6.5'
        implementation 'com.electronwill.night-config:toml:3.6.5'
        modImplementation "curse.maven:forgeconfigapiport-547434:${project.forge_config_version}"

        // REI
        modCompileOnlyApi("me.shedaniel:RoughlyEnoughItems-api-fabric:${project.rei_version}")
        modCompileOnlyApi("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}")

        // compile against the JEI API but do not include it at runtime
        modCompileOnlyApi "mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"
        modCompileOnlyApi "mezz.jei:jei-${minecraft_version}-fabric-api:${jei_version}"

        modImplementation(include("me.alphamode:Star:${project.star_version}+${project.minecraft_version}"))
    }
}

dependencies {
    // modRuntimeOnly("com.github.Andrew6rant:InventoryTabs:inventorytabs-${inventorytabs_version}")
    // mockito (no idea what this is)
    testCompileOnly("org.mockito:mockito-core:2.23.4")

    // dependencies
    implementation project(path: ":mantle", configuration: "namedElements")
    modImplementation(include("io.github.tropheusj:milk-lib:${project.milk_lib_version}"))
    modApi(include("io.github.tropheusj:dripstone-fluid-lib:${project.dripstone_fluid_lib_version}"))

    if (project.recipe_viewer == 'jei') {
        // at runtime, use the full JEI jar for Fabric
        modRuntimeOnly "mezz.jei:jei-${minecraft_version}-fabric:${jei_version}"
    } else if (project.recipe_viewer == 'rei') {
        modRuntimeOnly("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}")
    } else {
        println("unknown recipe viewer: $recipe_viewer")
    }
}

task buildOrPublish {
    group = "build"
    String mavenUser = System.getenv().MAVEN_USER
    if (mavenUser != null && !mavenUser.isEmpty()) {
        dependsOn(tasks.getByName("publish"))
        println "prepared for publish"
    } else {
        dependsOn(tasks.getByName("build"))
        println "prepared for build"
    }
}

// need to copy into each build directory, unfortunately does not seem easy to do this automatically
def buildPaths = [
    "$rootDir/out/production/resources", // IDEA
    "$rootDir/bin", // Eclipse
]

// task to add mods.toml to all relevant folders
task replaceResources {
    // ensure directory exists, first build likes to fail
    new File("${processResources.destinationDir}/META-INF").mkdirs()
    // copy for gradle
    copy {
        outputs.upToDateWhen { false }
//        with modsTomlSpec
        into processResources.destinationDir
    }
    // copy for IDEs
    buildPaths.each { path ->
        if (new File(path).exists()) {
            copy {
                outputs.upToDateWhen { false }
                with modsTomlSpec
                into path
            }
        }
    }
}

// process mods.toml to inject variables
processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }

    exclude 'META-INF/mods.toml'
    finalizedBy replaceResources
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'

    it.options.release = 17
}

java {
    withSourcesJar()
}

jar {
    from('LICENSE') {
        rename { "${it}_${project.archivesBaseName}" }
    }

    manifest {
        attributes([
            "Specification-Title"     : "Hephaestus",
            "Specification-Vendor"    : "Slime Knights",
            "Specification-Version"   : "1", // We are version 1 of ourselves
            "Implementation-Title"    : project.name,
            "Implementation-Version"  : "${version}",
            "Implementation-Vendor"   : "Slime Knights",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {
        maven {
            url = "https://mvn.devos.one/${System.getenv().PUBLISH_SUFFIX}/"
            credentials {
                username = System.getenv().MAVEN_USER
                password = System.getenv().MAVEN_PASS
            }
            authentication { basic(BasicAuthentication) }
        }
    }
}
